//참고용--------------------------------------------------------------
http://www.devkorea.co.kr/bbs/board.php?bo_table=m03_qna&wr_id=74302
http://itleader.tistory.com/179
https://astoration.gitbooks.io/sihs-shootinggame/content/7c77c_cc28_-_b808_c774_c800_bc1c_c0ac_d558_ae30.html
http://kujung.tistory.com/45 // 카메라 이동 참고

http://bronks.tistory.com/445   // 무료 bgm 소스 모음 - 공유마당 


http://ronniej.sfuh.tk/%EC%9C%A0%EB%8B%88%ED%8B%B0%EC%97%90%EC%84%9C-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%ED%92%80-object-pool-%EB%A7%8C%EB%93%A4%EA%B8%B0-3-%EC%B4%9D%EC%95%8C-%EB%B0%9C%EC%82%AC%ED%95%98%EA%B8%B0/ //총알발사




https://m.blog.naver.com/PostView.nhn?blogId=1mi2&logNo=220804516395&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F //스와이프 




//-------------------------------------------------------------------


//블럭 + 2d 콜라이더 + 중력 걸기
viod update(){
transform. translate(0,-0.1f,0);//해당프레임 등속으로 낙하산
if(transform.position.y<-5.0f){ 
destroy(gameobject); // 화면밖으로 나가면  오브젝트 소멸
}
}

//-------------------------------------------------------------------
//골대 도착
void ontriggerenter2d(collider2d other){
debug.log("탈출!")
scenemanager.loadscene("clearscene");
}
//------------------------------------------------------------------------------------
//점프 푸쉬
void update(){
//wjavmgksek
if(input.getkeydown(keycode.space))
}
//---------------------------------------------------------------
// 거리 표시
gameobject man;
gameobject goal;
gameobject distance(거리안내 문구);
//---------------------------------------------------------------------
void start(){
this.man= gameobjet.find( man = 오브젝트와 이름 같게 해둘것);
this.goal= gameobjet.find(goal);
this.distance= gameobjet.find(distance);}

void update(){
float length = this.goal.transform.position.x-this.man.transform.position.x;
this. distance. getcomponent<text>().text="탈출까지"+length.tostring("f2")+"m";
}
  //-------------------------------------------------------------------------------
  //이동
 public void lbuttondown(){
 transform.translate(-3,0,0);
 }
  public void rbuttondown(){
 transform.translate(3,0,0);
 }
 //---------------------------------------------------------
 //점프
  public void jbuttondown(){
 transform.translate(0,5,0);
 }
 //--------------------------------------------------------------
 //체력
 if(d<r1+r2){
 gameobject director = gameobject .find(gamedirector);
 director.getcomponent<gamedirector>().decreasehp();
 destroy(gameobject);// 충돌시 소멸
 }
 //----------------------------------------------------------------------------------------------------
 //마우스 클릭 지점 으로 이동
 public void OnMouseDown () { 
 RaycastHit hit = new RaycastHit(); 
 ray = Camera.main.ScreenPointToRay(Input.mousePosition); //이부분 까지는 이해하실꺼에요 
 if(Physics.Raycast(ray, out hit)) { 
  Vectro3 pos = hit.point; //pos에 마우스 클릭 지점의 좌표값이 들어가게 돼요. 
  Destroy(gameObject); 
  Instantiate(Explosion, pos, Quaternion.identity); 
 } 
} 
 //---------------------------------------------------------------------------------------
 //마우스 클릭지점 에서 생성
 //준비물
  
    // Vector3 계산에 사용.
    Vector3 tempVector3;
    // Vector2 계산에 사용.
    Vector2 tempVector2 = new Vector2();
    // 생성에 사용되는 오브젝트 처리.
    GameObject 박스_0;
  
  
  if( Input.GetMouseButtonDown(0) )
        {
            // 마우스 입력 위치를 카메라가 바라보는 영역 안의 월드 좌표(절대 좌표)로 변환.
            tempVector3 = mainCamera.ScreenToWorldPoint(Input.mousePosition);
            tempVector3.z = -1;
            
        }
        
        
        
        tempObj = Instantiate(박스_0, 박스_0Point.position,
            Quaternion.LookRotation(박스_0Direction)) as GameObject;
            
            //------------------------------------------------------------------------------
            Ray2D ray = Camera.main.ScreenPointToRay(Input.mousePosition); 
RayCastHit2D hit; 

if(Physics2D.Raycast(ray, out hit, distance)) { 
        hit.point값으로 생성 
} 

//----------------------------------------------------------------------
 
 
 박스_0 = Instantiate(prefab, new Vector3(tempVector3, tempVector3.z));
 
 
 //----------------------------------------------------------------------------
  if (Input.GetMouseButtonDown(0)) 
        { 
            // 스크린 좌표를 월드 좌표로 변환함 
            Vector3 wp = Camera.main.ScreenToWorldPoint(Input.mousePosition); 

            Vector2 touchPos = new Vector2(wp.x, wp.y); 

            // 오브젝트의 위치를 갱신함 
            transform.position = touchPos; 

            // 생성 
            GameObject instObj =  Instantiate(instaniateObj, transform.position, Quaternion.identity) as GameObject; 

            // 파괴 
            Destroy(instObj.gameObject, 0.1f); 
        }
        
        ------------------------------------------
        
        위버튼 다운 (){ transform.position (0,-3,0) }
      아래 버튼 다운(){ transform.position (0,3,0) }
      
      ----------------------------------------------------------------------
      생성위치 고정 (총끝) 
      발사체의 방향, 힘을  x 축으로 고정?
     팔자체의 위치변경
      
      RaycastHit hit;
			Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
			Physics.Raycast (ray, out hit);
			
			GameObject myBullet = Instantiate (Bullet, Bulletstart.transform.position, Bulletstart.transform.rotation) as GameObject;
			myBullet.transform.LookAt (hit.point);
      
      - > myBullet.transform.LookAt(Camera.main.ScreenToWorldPoint(Input.mousePosition));
      
      GameObject myBullet = Instantiate (bullet, spPoint.transform.position, spPoint.transform.rotation); 식으로 하시고 
발사할떄는 myBullet.rigidbody.AddForce (spPoint.transform.forward * power);

Transform.TransformDirection 확인할것



플레이어 0 이 와이퍼처럼 회전(로테이션)한다면 게임오브젝트의 gameObject.transform.forward 로 오브젝트가 가리키는 front방향을 찾을수 있습니다. 이 벡터는 오브젝트가 바라보고있는 방향을 제시해주고 크기는 항상 1입니다. 

플레이어는 그대로고 총구가 와이퍼처럼 회전한다면 총구의  gameObject.transform.forward 를 이용할수 있겠습니다. 

만약 회전하는 방법을 물으신것이라면 간단하게는 트윈로테이션부터 코루틴등 다양한 방법으로 회전시킬수 있고... 

더미오브젝트하나를 플레이어 앞에 좌우로 핑퐁이동시켜놓고 플레이어가 update()에서 더미오브젝트에 대해 transform.Lookat(더미오브젝트); 을 호출하면 이동하는 오브젝트를 계속 쳐다보게 됩니다.(와이퍼처럼 움직이게 되겠죠)

2D형식이면 forward 축이 y인가요? 
그럼 그냥 Transform.up 하시면 될 것 같은데요...
      
      vector2 (위치조정) = (Camera.main.screentoworldpoint(input.mousePosition) - (발사체).transform.position);
      getcomponen<transform>().transform.translate(위치조정.normalized*bulletspeed*time.deltatime);
      
      http://ronniej.sfuh.tk/category/game-development-and-programming/unity3d/page/10/  // 
      
